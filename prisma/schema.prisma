generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  //@db.Text
    access_token      String?  //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    admin         Boolean   @default(false)
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Category {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name String
    pages Page[]
}

model Page {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name String
    category Category @relation(fields: [categoryId], references: [id])
    categoryId String @db.ObjectId
    blockIds String[] @db.ObjectId
    blocks Block[] @relation(fields: [blockIds], references: [id])
}

model Block {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    order Int
    blockName String
    blockType String
    pageIds String[] @db.ObjectId
    pages Page[] @relation(fields: [pageIds], references: [id])
    imagePaths String[]
    textFields TextField[]
}

model TextField {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    fieldType String
    fieldName String
    content String
    block Block @relation(fields: [blockId], references: [id])
    blockId String @db.ObjectId
}